/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Tables
 * ------
 *
 *   Some observations:
 *     - `{|' always opens a table. If no `|}' is found, the table runs to the
 *       end of the document.
 *     - After `{|' and `|-' everything is an attribute until the EOL.
 *       Unrecognized attributes are discarded as garbage.
 *     - After `|+', `|' and `!' everything is an attribute if there's a `|' on
 *       the same line that is NOT preceded by `[[', no matter if a valid link
 *       is formed or not. The actual cell content starts after the `|'.
 *       - If there's no `|' on the same line, everything is cell content.
 *     - After `|+', `||' and `!!' is meaningless and just text.
 *     - After `!', both `!!' and `||' start a new HEADER cell, IF they appear
 *       on the same line.
 *     - After `|', only `||' starts a new cell, IF it appears on the same line.
 *       `!!' is just recognized as text.
 *
 * Table
 * -----
 *
 *   Grammar:
 *     - S* '{|' TableAttribute* Eol TableContent* S* '|}'
 *
 */

module org.sweble.wikitext.parser.parser.Table;

import org.sweble.wikitext.parser.utils.Assert;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.State;
import org.sweble.wikitext.parser.parser.TableAttribute;
import org.sweble.wikitext.parser.parser.TableCaption;
import org.sweble.wikitext.parser.parser.TableCell;
import org.sweble.wikitext.parser.parser.TableHeader;
import org.sweble.wikitext.parser.parser.TableRow;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- Header / Body / Footer ---------------------------------------------------

body
{
  @SuppressWarnings("serial")
  private static final class TableHead
      extends
          WtTempNode
  {
    WtNode rt0;
    WtNode rt1;
    WtXmlAttributes attrs;
  }

  @SuppressWarnings("serial")
  private static final class TableMemberAttributes
      extends
          WtTempNode
  {
    WtXmlAttributes attrs;
    Object[] rt1;
  }
}




// -- Table --[ State Aware Memoization ]---------------------------------------

noinline transient WtNode Table =
 ^{
    StateAwareResult r = (StateAwareResult) pTableMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pTableTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtNode TableMemoized =
 ^{
    Result yyResult = new StateAwareResult("Table", getContext(), pTableTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- Table --------------------------------------------------------------------

noinline transient WtTable TableTransient =
  &{ accept(ParserAtoms.TABLE) } TableBody
;

inline void BlockStopperNextTableElement =
    &{ inScope(ParserScopes.TABLE_ELEMENTS) ||
       inScope(ParserScopes.TABLE_CELL) }
         pExtSpaceStar [|!]
;




// -- Table Body ---------------------------------------------------------------

private inline WtTable TableBody =
    head:TableHead rt2:pEol body:TableContentStar rt3:pExtSpaceStar close:"|}"?
    {
      yyValue = setRtd(
        nf.table(head.attrs, body),
        head.rt0, "{|", SEP, head.rt1, rt2, SEP, rt3, close);
    }
  / head:TableHead Eof
    {
      yyValue = setRtd(
        nf.table(head.attrs),
        head.rt0, "{|", SEP, head.rt1, SEP);
    }
;

private inline TableHead TableHead =
  rt0:pExtSpaceStar "{|" attrs:TableAttributeStar rt1:pExtSpaceStar
  {
    yyValue = new TableHead();
    yyValue.rt0 = rt0;
    yyValue.attrs = attrs;
    yyValue.rt1 = rt1;
  }
;

private transient stateful WtBody TableContentStar =
  {
    enter(ParserScopes.TABLE_ELEMENTS);
  }
  garbage:InlineBlockContent content:TableElement* &TableDoneSanityCheck
  {
    yyValue = nf.body(nf.list(garbage, content));
  }
;

private transient WtNode TableElement =
  &TableElementPrefix ( TableCaption / TableRow / TableCell / TableHeader )
;

private inline void TableElementPrefix =
    pExtSpaceStar "|+"
  / pExtSpaceStar "|-"
  / pExtSpaceStar "|" !"}"
  / pExtSpaceStar "!"
;

private inline void TableDoneSanityCheck =
  pExtSpaceStar ( "|}" / "|" / Eof )
;




// -- End of file --------------------------------------------------------------
