/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 *
 * Internal Link or Image
 * ----------------------
 *
 *   Grammar:
 *     - '[[' PageTitle LinkOption* LinkTitle ']]' LinkPostfix
 *
 *   - PageTitle can contain spaces but no newlines.
 *     - If a newline occurs before the closing brackets or the first pipe
 *       character, the internal link is not recognized as such!
 *
 * Link Option: Resize
 * -------------------
 *
 *   Grammar:
 *     - LinkOptionResize ::= Ws* Digit+ Space* 'px' Ws*
 *     - LinkOptionResize ::= Ws* Digit+ 'x' Digit* Space* 'px' Ws*
 *     - LinkOptionResize ::= Ws* 'x' Digit+ Space* 'px' Ws*
 *
 *   - If heightString is null the first production matched.
 *   - If widthString is null the third production matched.
 *   - If both are null there is no information which production matched.
 *   - Otherwise the second production matched.
 *   - If one of the dimensions is missing the value of the width/height is set
 *     to -1.
 *
 * Link Option: Keyword
 * --------------------
 *
 *   Grammar:
 *     - LinkOptionKeyword ::= Ws* LinkOptionKeyword Ws*
 *
 * Link Option: LinkTarget
 * -----------------------
 *
 *   Grammar:
 *     - LinkOptionLinkTarget ::= Ws* 'link=' LinkTarget Ws*
 *     - LinkOptionLinkTarget ::= Ws* 'link=' Url Ws*
 *
 * Link Option: AltText
 * --------------------
 *
 *   Grammar:
 *     - LinkOptionAltText ::= Ws* 'alt=' LinkTitleContent{ALT}*
 *
 * Link Title
 * ----------
 *
 *   Grammar:
 *     - LinkTitle ::= LinkTitleContent{TITLE}*
 *
 *   LinkTitleContent can contain:
 *     - Newline
 *       - Tables
 *       - Headings
 *       - Horizontal rules
 *       - Block level elements
 *     - Signature
 *     - InternalLink
 *     - ExternalLink
 *     - PlainExternalLink
 *     - Ticks
 *     - XmlReference
 *     - XmlElement
 *     - ParserEntity
 *
 *   The LinkTitleContent cannot contain:
 *     - PageSwitch
 *
 */

module org.sweble.wikitext.parser.parser.InternalLink;

import org.sweble.wikitext.parser.utils.Numbers;
import org.sweble.wikitext.parser.utils.ParserCharSequence;
import org.sweble.wikitext.parser.utils.ParserEntity;
import org.sweble.wikitext.parser.utils.Warnings;
import org.sweble.wikitext.parser.utils.XmlReference;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.LinkTarget;
import org.sweble.wikitext.parser.parser.State;
import org.sweble.wikitext.parser.parser.Url;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- Header / Body / Footer ---------------------------------------------------

body
{
  Result parseLinkPostfix(int start, int base)
  {
    Pattern p = yyState.getInternalLinkPostfixPattern();
    if (p == null)
      return new SemanticValue("", base);

    Matcher m = p.matcher(new ParserCharSequence(base));

    if (!m.lookingAt())
    {
      return new SemanticValue("", base);
    }
    else
    {
      return new SemanticValue(m.group(), base + m.end());
    }
  }

  private WtNode addLinkPrefix(WtText text, WtInternalLink link)
  {
    String t = text.getContent();
    if (!t.isEmpty())
    {
      // shortcut (prefix cannot contain whitespace)
      if (!Character.isWhitespace(t.charAt(t.length() - 1)))
      {
        Matcher matcher =
                getState().getInternalLinkPrefixPattern().matcher(t);

        if (matcher.find())
        {
          String p = matcher.group(1);
          if (!p.isEmpty())
          {
            String b = t.substring(0, t.length() - p.length());

            WtInternalLink l = (WtInternalLink) link.cloneWrapException();
            if (isGatherRtData())
            {
              if (l.getRtd() != null)
                  l.setRtd((WtRtData) l.getRtd().cloneWrapException());
              prependRtd(l, p);
            }
            l.setPrefix(p);

            return nf.list(nf.text(b), l);
          }
        }
      }
    }

    return nf.list(text, link);
  }

  private int toInt(String num)
  {
    if (num == null)
      return -1;

    try
    {
      return Integer.parseInt(num);
    }
    catch (NumberFormatException e)
    {
      return -2;
    }
  }
}




// -- Internal link --[ State Aware Memoization ]-------------------------------

noinline transient WtNode InternalLink =
 ^{
    StateAwareResult r = (StateAwareResult) pInternalLinkMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pInternalLinkTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtNode InternalLinkMemoized =
 ^{
    Result yyResult = new StateAwareResult("InternalLink", getContext(), pInternalLinkTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;




// -- Internal link ------------------------------------------------------------

noinline transient WtNode InternalLinkTransient =
    "[[" &{ accept(ParserAtoms.INTERNAL_LINK) } yyValue:InternalLinkChoice
  / "["
    {
      yyValue = nf.text("[");
    }
;

inline void InlineContentStopperInternalLink =
    &{ inScope(ParserScopes.INTERNAL_LINK_ALT)   } ( "]]" / "[[" InternalLinkChoice / '|' )
  / &{ inScope(ParserScopes.INTERNAL_LINK_TITLE) } ( "]]" / "[[" InternalLinkChoice )
  / &{ inScope(ParserScopes.IMAGE_LINK_ALT)      } ( "]]" / '|' )
  / &{ inScope(ParserScopes.IMAGE_LINK_TITLE)    } ( "]]" )
;

private transient stateful WtNode InternalLinkChoice =
    rt0:pTpStar target:LinkTarget rt1:pExtSpaceStar
    {
      getState().initLinkBuilder(target);
    }
    &{ getLinkBuilder().isValidTarget() } options:OptionsAndTitle "]]" postfix:LinkPostfix?
    {
      if (postfix == null)
        postfix = "";

      yyValue = getState().getLinkBuilder().build(options, postfix);
      if (getLinkBuilder().isImageTarget())
      {
        setRtd(
          yyValue,
          "[[", rt0, SEP, rt1, SEP, "]]", postfix);
      }
      else
      {
        setRtd(
          yyValue,
          "[[", rt0, SEP, rt1, SEP, "]]", postfix);
      }
    }
  / &{ isWarningsEnabled() } InternalLinkAutoCorrect
;

private inline WtNode InternalLinkAutoCorrect =
    &{ isAutoCorrect(WS_INFO) }
    rt0:pTpStar target:LinkTarget
    {
      getState().initLinkBuilder(target);
    }
    &{ getLinkBuilder().isValidTarget() }
    {
      yyValue = getState().getLinkBuilder().build(nf.emptyLinkOpts(), null);

      if (getLinkBuilder().isImageTarget())
      {
        setRtd(
          yyValue,
          "[[", rt0, target, SEP, SEP);
      }
      else
      {
        setRtd(
          yyValue,
          "[[", rt0, target, SEP);
      }

      fileLooksLikeWarning(
          yyValue,
          makeSpan(yyStart - 2, yyResult),
          WS_INFO,
          "Internal Link",
          "the finishing `]]' is missing");
    }
  / &{ isWarningLevelEnabled(WS_INFO) }
    &( pTpStar target:LinkTarget
       {
        getState().initLinkBuilder(target);
       }
       &{ getLinkBuilder().isValidTarget() }
     )
    {
      yyValue = nf.text("[[");

      fileLooksLikeWarning(
          yyValue,
          makeSpan(yyStart - 2, yyPredResult),
          WS_INFO,
          "Internal Link",
          "the finishing `]]' is missing");
    }
  / &{ isWarningLevelEnabled(WS_NONE) }
    {
      yyValue = nf.text("[[");

      fileLooksLikeWarning(
          yyValue,
          makeSpan(yyStart - 2, yyStart),
          WS_NONE,
          "Internal Link",
          "a target link is missing");
    }
;




// -- Options ------------------------------------------------------------------

private inline WtLinkOptions OptionsAndTitle =
    &{ !getLinkBuilder().isImageTarget() } title:LinkTitle?
    {
      yyValue = nf.linkOpts(title);
    }
  / yyValue:LinkOptionStar
;

private transient WtLinkOptions LinkOptionStar =
  options:( void:'|' LinkOptionChoice )*
  {
    yyValue = nf.linkOpts(nf.list(options));
  }
;

/* Let's try to not make this stupid mistake again:
 * The '''  &( '|' / "]]" ) ''' part has to be listed for each alternative and
 * NOT after the whole LinkOptionChoice production to make sure, that the other
 * alternatives are also tried first. The bug was introduced last in commit
 * 0449049309cfb3706561e6ddd6655d967b1bbcf3
 */
private inline WtNode LinkOptionChoice =
    yyValue:LinkOptionResize &( '|' / "]]" )
    {
      getLinkBuilder().addOption((WtLinkOptionResize) yyValue);
    }
  / yyValue:LinkOptionKeyword &( '|' / "]]" )
    {
      getLinkBuilder().addOption((WtLinkOptionKeyword) yyValue);
    }
  / LinkOptionNameValue &( '|' / "]]" )
  / LinkOptionUnresolved &( '|' / "]]" )
  / LinkOptionTitle &( '|' / "]]" )
;




// -- Link Option Resize -------------------------------------------------------

private WtLinkOptionResize LinkOptionResize =
    rt0:pExtWsStar width:DigitPlus rt1:pSpaceStar "px" rt2:pExtWsStar
    {
      int w = toInt(width);

      if (w == -2)
        getLinkBuilder().addWarning(
            makeOddSyntaxWarning(
                makeSpan(yyStart, yyResult),
                WS_INFO,
                "Invalid size format"));

      yyValue = setRtd(
        nf.loResize(w, -1),
        '|', rt0, width, rt1, "px", rt2);
    }
  / rt0:pExtWsStar width:DigitPlus 'x' height:DigitPlus? rt1:pSpaceStar "px" rt2:pExtWsStar
    {
      int w = toInt(width);
      int h = toInt(height);

      if (w == -2 || h == -2)
        getLinkBuilder().addWarning(
            makeOddSyntaxWarning(
                makeSpan(yyStart, yyResult),
                WS_INFO,
                "Invalid size format"));

      yyValue = setRtd(
        nf.loResize(w, h),
        '|', rt0, width, 'x', height, rt1, "px", rt2);
    }
  / rt0:pExtWsStar 'x' height:DigitPlus rt1:pSpaceStar "px" rt2:pExtWsStar
    {
      int h = toInt(height);

      if (h == -2)
        getLinkBuilder().addWarning(
            makeOddSyntaxWarning(
                makeSpan(yyStart, yyResult),
                WS_INFO,
                "Invalid size format"));

      yyValue = setRtd(
        nf.loResize(-1, h),
        '|', rt0, 'x', height, rt1, "px", rt2);
    }
;




// -- Link Option Keyword ------------------------------------------------------

private WtLinkOptionKeyword LinkOptionKeyword =
  rt0:pExtWsStar keyword:LinkOptionKeywordString &{ getLinkBuilder().isKeyword(keyword) } rt1:pExtWsStar
  {
    yyValue = setRtd(
      nf.loKeyword(keyword),
      '|', rt0, keyword, rt1);
  }
;

private transient String LinkOptionKeywordString =
  [A-Za-z\-]+
;




// -- Link Option Name Value ---------------------------------------------------

private transient stateful WtNode LinkOptionNameValue =
    rt0:pExtWsStar "link=" target:LinkTargetOverride? rt1:pExtWsStar
    {
		WtLinkOptionLinkTarget linkTarget = (target == null) ?
				nf.loLinkTargetNoLink() :
				nf.loLinkTarget(target, target.getTargetType());
		
		yyValue = setRtd(
				linkTarget,
				'|', rt0, "link=", SEP, rt1);
    }
  / rt0:pExtWsStar "alt="
    {
      enter(ParserScopes.INTERNAL_LINK_ALT);
    }
    alt:LinkTitleContentStar
    {
      yyValue = setRtd(
        nf.loAlt(alt),
        '|', rt0, "alt=", SEP);
    }
;

private inline WtLinkTarget LinkTargetOverride =
    Url
  / LinkTarget
;




// -- Link Option Unresolved Template ------------------------------------------

private inline WtNode LinkOptionUnresolved = 
  rt0:pExtWsStar entity:ParserEntityTmplParamCommentIgnore rt1:pExtWsStar
  {
    prependRtd(entity, '|', rt0);
    appendRtd(entity, rt1);
    yyValue = entity;
  }
;




// -- Link Option Title --------------------------------------------------------

private inline stateful WtLinkTitle LinkOptionTitle =
  {
    enter(getLinkBuilder().isImageTarget() ?
        ParserScopes.IMAGE_LINK_ALT :
        ParserScopes.INTERNAL_LINK_ALT);
  }
  content:LinkTitleContentStar
  {
    yyValue = setRtd(
      nf.linkTitle(content),
      '|', SEP);
  }
;




// -- Link Title ---------------------------------------------------------------

private inline stateful WtLinkTitle LinkTitle =
  {
    enter(getLinkBuilder().isImageTarget() ?
        ParserScopes.IMAGE_LINK_TITLE :
        ParserScopes.INTERNAL_LINK_TITLE);
  }
  '|' title:LinkTitleContentStar
  {
    yyValue = setRtd(
      nf.linkTitle(title),
      '|', SEP);
  }
;




// -- Link Title Content -------------------------------------------------------

private inline WtNodeList LinkTitleContentStar =
  InlineBlockContent
;




// -- Link Postfix -------------------------------------------------------------

private noinline transient String LinkPostfix =
  &{ !getLinkBuilder().isImageTarget() }
  ^{
      Result yyResult = parseLinkPostfix(yyStart, yyBase);
   }
;




// -- End of file --------------------------------------------------------------
