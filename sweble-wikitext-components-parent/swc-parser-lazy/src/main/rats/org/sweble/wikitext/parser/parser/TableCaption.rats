/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * TableCaption
 * ------------
 *
 *   Grammar:
 *     - S* '|+' TableAttributeInline* S* '|' TableCaptionContent* Garbage* Eol
 *
 */

module org.sweble.wikitext.parser.parser.TableCaption;

import org.sweble.wikitext.parser.utils.Assert;

import org.sweble.wikitext.parser.parser.Content;
import org.sweble.wikitext.parser.parser.TableAttributeInline;
import org.sweble.wikitext.parser.parser.Whitespace;




// -- Table Caption --[ State Aware Memoization ]-------------------------------

noinline transient WtNode TableCaption =
 ^{
    StateAwareResult r = (StateAwareResult) pTableCaptionMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, pTableCaptionTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtNode TableCaptionMemoized =
  ^{
      Result yyResult = new StateAwareResult("TableCaption", getContext(), pTableCaptionTransient(yyBase));
      if (returnTrue(yyResult))
        return yyResult;
   }
;




// -- Table Caption ------------------------------------------------------------

noinline transient WtNode TableCaptionTransient =
    rt0:pExtSpaceStar "|+" attributes:Attributes body:InlineContentStar garbage:Garbage &ExpectedFollowUp
    {
      yyValue = setRtd(
        nf.caption(attributes.attrs, body),
        rt0, "|+", SEP, attributes.rt1, SEP, garbage);
    }
  / rt0:pExtSpaceStar "|+" attributes:Attributes body:BlockContentStar &ExpectedFollowUp
    {
      yyValue = setRtd(
        nf.caption(attributes.attrs, body),
        rt0, "|+", SEP, attributes.rt1, SEP);
    }
;

private inline String Garbage =
  &"||" garbage:GarbageStar end:( pEol / pEof )
  {
    yyValue = garbage + end;
  }
;

private  String GarbageStar =
  ( !( slEol pExtSpaceStar [|!] ) _ )*
;

private inline void ExpectedFollowUp =
  pExtSpaceStar ( "!" / "|+" / "|-" / "|}" / "|" / Eof )
;




// -- Table Caption Attributes -------------------------------------------------

private memoized TableMemberAttributes Attributes =
    &AttrPossible attrs:TableAttributeInlineStar ws:pExtSpaceStar '|' !'|'
    {
      yyValue = new TableMemberAttributes();
      yyValue.attrs = attrs;
      yyValue.rt1 = new Object[] {ws, '|'};
    }
  / {
      yyValue = new TableMemberAttributes();
      yyValue.attrs = nf.emptyAttrs();
      yyValue.rt1 = null;
    }
;

private transient void AttrPossible =
  ( ![<|] !"[[" !slEol _ )* '|' !'|'
;




// -- Table Caption Content ----------------------------------------------------

private inline stateful WtBody InlineContentStar =
  {
    enter(ParserScopes.TABLE_INLINE_CELL);
  }
  content:InlineContentPlus
  {
    yyValue = nf.body(content);
  }
;

private inline stateful WtBody BlockContentStar =
  {
    enter(ParserScopes.TABLE_CELL);
  }
  content:BlockContent
  {
    yyValue = nf.body(content);
  }
;




// -- End of file --------------------------------------------------------------
