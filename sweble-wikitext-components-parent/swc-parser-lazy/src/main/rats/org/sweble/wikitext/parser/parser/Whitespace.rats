/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module org.sweble.wikitext.parser.parser.Whitespace;

import org.sweble.wikitext.parser.utils.ParserEntity;

modify org.sweble.wikitext.parser.utils.Whitespace;




// -- Definition of StateLess EOL productions ----------------------------------

   inline String  pSlEol        = "\r\n"     // <S>tate<L>ess
                                / "\r"
                                / "\n"
                                / "\u2028"
                                / "\u2029"
                                / "\u000B"
                                / "\u000C"
                                / "\u0085" ;

   inline void    slEol         = "\r\n"     // <S>tate<L>ess
                                / '\r'
                                / '\n'
                                / '\u2028'
                                / '\u2029'
                                / '\u000B'
                                / '\u000C'
                                / '\u0085' ;

transient void    slEolOrEof    = slEol
                                / Eof ;




// -- Redefinition of EOL Stateful productions ---------------------------------

// IMPORTANT: Due to this redefinition all production including Eol, pEol or 
// pEolNode are stateful and must not be memoized naively! 

String pEol :=
  <DUMMY> &{ acceptEol() } pSlEol
;

void Eol :=
  <DUMMY> &{ acceptEol() } slEol
;

transient WtNewline pEolNode =
  eol:pEol
  {
    yyValue = nf.newline(eol);
  }
;




// -- Preserved Transparent Elements -------------------------------------------

WtNode pTpStar = ptTpStar ;

WtNode pTpPlus = ptTpPlus ;

private transient WtNodeList ptTpStar =
  tp:pTransparent*
  {
    yyValue = nf.list(tp);
  }
;

private transient WtNodeList ptTpPlus =
  tp:pTransparent+
  {
    yyValue = nf.list(tp);
  }
;

private inline WtNode pTransparent =
  ParserEntityXmlCommentOrIgnore
;




// -- Preserved Extended Spaces ------------------------------------------------

WtNode pExtSpaceStar = ptExtSpaceStar ;

WtNode pExtSpacePlus = ptExtSpacePlus ;

private transient WtNodeList ptExtSpaceStar =
  s:pExtSpaceAtom*
  {
    yyValue = nf.list(s);
  }
;

private transient WtNodeList ptExtSpacePlus =
  s:pExtSpaceAtom+
  {
    yyValue = nf.list(s);
  }
;

private inline WtNode pExtSpaceAtom =
    spaces:pSpacePlus
    {
      yyValue = nf.text(spaces);
    }
  / pTransparent
;




// -- Preserved Extended Whitespace --------------------------------------------

// IMPORTANT: Due to this redefinition of Eol, pEol and pEolNode all whitespace
// productions are context sensitive and can only be memoized with 
// StateAwareResult. 

noinline transient WtNode pExtWsStar =
 ^{
    StateAwareResult r = (StateAwareResult) ppExtWsStarMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, ppExtWsStarTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtWhitespace pExtWsStarMemoized =
 ^{
    Result yyResult = new StateAwareResult("pExtWsStar", getContext(), ppExtWsStarTransient(yyBase));
    if (returnTrue(yyResult))
      return yyResult;
  }
;

noinline transient WtWhitespace pExtWsStarTransient =
  s:pExtSpaceStar ws:pExtWsAtom*
  {
    yyValue = nf.ws(nf.list(s, ws), !ws.isEmpty());
  }
;

/*
noinline transient WtNode pExtWsPlus =
 ^{
    StateAwareResult r = (StateAwareResult) ppExtWsPlusMemoized(yyBase);
    final WikitextParserContext context = getContext();
    Result yyResult = r.getResult(context);
    if (yyResult == null)
      yyResult = r.setResult(context, ppExtWsPlusTransient(yyBase));
    if (returnTrue(r))
      return yyResult;
  }
;

noinline memoized WtWhitespace pExtWsPlusMemoized =
 ^{
    Result yyResult = new StateAwareResult("pExtWsPlus", getContext(), ppExtWsPlusTransient(yyBase));
    if (returnTrue(yyResult))
       return yyResult;
  }
;

noinline transient WtWhitespace pExtWsPlusTransient =
    s:pExtSpacePlus ws:pExtWsAtom*
    {
      yyValue = nf.ws(nf.list(s, ws), !ws.isEmpty());
    }
  / ws:pExtWsAtom+
    {
      yyValue = nf.ws(nf.list(ws), true);
    }
;
*/

private inline WtNode pExtWsAtom =
    ws:pWsPlus
    {
      yyValue = nf.text(ws);
    }
  / pTransparent
;




// -- End of file --------------------------------------------------------------
